#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 29 17:12:50 2020

@author: santi
"""

import os
import numpy as np
import matplotlib.pyplot as plt

os.environ["PATH"] += os.pathsep + '/usr/local/texlive/2018/bin/x86_64-darwin'

"""
ejemplo uno: se침al adquirida de archivos .csv
"""
#ubicoci칩n de archivo archivo .csv
contenido=os.listdir()
file = open('figTotal2.csv', 'r')
#almaceno datos de .csv en una lista de python
elementos=[]
for line in file:
    elementos.append(line.split(','))
file.close()
#se definen listas con variables del archivo .csv
t=[]  
Sfa=[] 
Sfb=[]
Sfc=[]
Sloada=[]  
Sloadb=[] 
Sloadc=[] 
Sa1=[]
Sb1=[]
Sc1=[]
Sa2=[]
Sb2=[]
Sc2=[] 
#inicia el while en 1 para quitar los nombres del archivo .csv y convierte
#los datos de cadena a flotante
n=1
while n<len(elementos):
    #selecci칩n de datos en archivos
    # t.append(float(elementos[n][0]))
    t.append(float(elementos[n][0]))   
    Sfa.append(float(elementos[n][1])) 
    Sfb.append(float(elementos[n][2])) 
    Sfc.append(float(elementos[n][3])) 
    Sloada.append(float(elementos[n][4]))  
    Sloadb.append(float(elementos[n][5])) 
    Sloadc.append(float(elementos[n][6])) 
    Sa1.append(float(elementos[n][7])) 
    Sb1.append(float(elementos[n][8])) 
    Sc1.append(float(elementos[n][9])) 
    Sa2.append(float(elementos[n][10])) 
    Sb2.append(float(elementos[n][11])) 
    Sc2.append(float(elementos[n][12]))  
    n=n+1


#graficado de se침ales csv
    
plt.close("all")
    
    
plt.figure(1,figsize=[10,7])
plt.subplot(2,2,1)
limsupy=max([max(Sfa),max(Sfb),max(Sfc)])
limminy=min([min(Sfa),min(Sfb),min(Sfc)])
plt.plot(t,Sfa, label="I redA= "+str(round(max(Sfa[int(len(t)/4):]),2)))
plt.plot(t,Sfb, label="I redB= "+str(round(max(Sfb[int(len(t)/4):]),2)))
plt.plot(t,Sfc, label="I redC= "+str(round(max(Sfc[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.65)
plt.legend()
plt.grid()
plt.text(-max(t)/5,limminy*1.7, "a)", size=20 )

plt.subplot(2,2,2)
limsupy=max([max(Sloada),max(Sloadb),max(Sloadc)])
limminy=min([min(Sloada),min(Sloadb),min(Sloadc)])
plt.plot(t,Sloada, label="I loadA= "+str(round(max(Sloada[int(len(t)/4):]),2)))
plt.plot(t,Sloadb, label="I loadB= "+str(round(max(Sloadb[int(len(t)/4):]),2)))
plt.plot(t,Sloadc, label="I loadC= "+str(round(max(Sloadc[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.65)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.6, "b)", size=20 )

plt.subplot(2,2,3)
limsupy=max([max(Sa1),max(Sb1),max(Sc1)])
limminy=min([min(Sa1),min(Sb1),min(Sc1)])
plt.plot(t,Sa1, label="I conv1A= "+str(round(max(Sa1[int(len(t)/4):]),2)))
plt.plot(t,Sb1, label="I conv1B= "+str(round(max(Sb1[int(len(t)/4):]),2)))
plt.plot(t,Sc1, label="I conv1C= "+str(round(max(Sc1[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.65)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.6, "c)", size=20 )


plt.subplot(2,2,4)
limsupy=max([max(Sa2),max(Sb2),max(Sc2)])
limminy=min([min(Sa2),min(Sb2),min(Sc2)])
plt.plot(t,Sa2, label="I conv2A= "+str(round(max(Sa2[int(len(t)/4):]),2)))
plt.plot(t,Sb2, label="I conv2B= "+str(round(max(Sb2[int(len(t)/4):]),2)))
plt.plot(t,Sc2, label="I conv2C= "+str(round(max(Sc2[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.65)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.6, "d)", size=20 )


plt.savefig("s2_02_corriente_fuente_corriente_red.pdf")







