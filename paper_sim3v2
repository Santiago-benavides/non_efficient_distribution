#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 29 17:12:50 2020

@author: santi
"""

import os
import numpy as np
import matplotlib.pyplot as plt

os.environ["PATH"] += os.pathsep + '/usr/local/texlive/2018/bin/x86_64-darwin'

"""
ejemplo uno: se침al adquirida de archivos .csv
"""
#ubicoci칩n de archivo archivo .csv
contenido=os.listdir()
file = open('simulacion_2v2.csv', 'r')
#almaceno datos de .csv en una lista de python
elementos=[]
for line in file:
    elementos.append(line.split(','))
file.close()
#se definen listas con variables del archivo .csv
t=[]  
Sloada=[]  
Sloadb=[] 
Sloadc=[] 
Mpd=[]  
Mpq=[]  
Mnd=[]  
Mnq=[]  
Mhmd=[]  
Mhmq=[]  

Sfa=[]  
Sfb=[]  
Sfc=[]  
Spdo=[]  
Spqo=[]  
Sndo=[]  
Snqo=[]  
Shmdo=[]  
Shmqo=[]  

Sa=[]  
Sb=[]  
Sc=[]  
Spd=[]  
Spq=[]  
Snd=[]  
Snq=[]  
Shmd=[]  
Shmq=[]

Sa2=[]  
Sb2=[]  
Sc2=[]  
Spd2=[]  
Spq2=[]  
Snd2=[]  
Snq2=[]  
Shmd2=[]  
Shmq2=[]

Sa3=[]  
Sb3=[]  
Sc3=[]  
Spd3=[]  
Spq3=[]  
Snd3=[]  
Snq3=[]  
Shmd3=[]  
Shmq3=[]

Va=[]
#inicia el while en 1 para quitar los nombres del archivo .csv y convierte
#los datos de cadena a flotante
n=1
while n<len(elementos):
    #selecci칩n de datos en archivos
    ###carga
    t.append(float(elementos[n][0]))  
    Sloada.append(float(elementos[n][1]))  
    Sloadb.append(float(elementos[n][2])) 
    Sloadc.append(float(elementos[n][3])) 
    Mpd.append(float(elementos[n][4]))  
    Mpq.append(float(elementos[n][5])) 
    Mnd.append(float(elementos[n][6]))  
    Mnq.append(float(elementos[n][7]))  
    Mhmd.append(float(elementos[n][8]))   
    Mhmq.append(float(elementos[n][9]))   
    ###red
    Sfa.append(float(elementos[n][10]))   
    Sfb.append(float(elementos[n][11]))   
    Sfc.append(float(elementos[n][12]))   
    Spdo.append(float(elementos[n][13]))   
    Spqo.append(float(elementos[n][14]))   
    Sndo.append(float(elementos[n][15]))   
    Snqo.append(float(elementos[n][16]))   
    Shmdo.append(float(elementos[n][17]))   
    Shmqo.append(float(elementos[n][18]))  
    ###fuente1
    Sa.append(float(elementos[n][19]))   
    Sb.append(float(elementos[n][20]))   
    Sc.append(float(elementos[n][21])) 
    Spd.append(float(elementos[1][22]))  
    Spq.append(float(elementos[n][23]))   
    Snd.append(float(elementos[n][24]))   
    Snq.append(float(elementos[n][25]))  
    Shmd.append(float(elementos[n][26]))  
    Shmq.append(float(elementos[n][27]))   
    ###fuente2
    Sa2.append(float(elementos[n][28]))   
    Sb2.append(float(elementos[n][29]))   
    Sc2.append(float(elementos[n][30])) 
    Spd2.append(float(elementos[1][31]))  
    Spq2.append(float(elementos[n][32]))   
    Snd2.append(float(elementos[n][33]))   
    Snq2.append(float(elementos[n][34]))  
    Shmd2.append(float(elementos[n][35]))  
    Shmq2.append(float(elementos[n][36]))   
    ###fuente3
    Sa3.append(float(elementos[n][37]))   
    Sb3.append(float(elementos[n][38]))   
    Sc3.append(float(elementos[n][39])) 
    Spd3.append(float(elementos[1][40]))  
    Spq3.append(float(elementos[n][41]))   
    Snd3.append(float(elementos[n][42]))   
    Snq3.append(float(elementos[n][43]))  
    Shmd3.append(float(elementos[n][44]))  
    Shmq3.append(float(elementos[n][45]))   
    
    
    Va.append(float(elementos[n][46]))   
    n=n+1

### cero de ruido en NH de red en inicio. no se porque no funciona. 

# Spdo=[]  
# Spqo=[]  
# Sndo=[]  
# Snqo=[]  
# Shmdo=[]  
# Shmqo
prueba=Spdo
n=0
while n<len(t)/3:
    # Spdo[n]=0
    Spqo[n]=0
    Sndo[n]=0
    Snqo[n]=0
    
    n=n+1

#graficado de se침ales csv
limsupyIr=max([max(Sfa),max(Sfb),max(Sfc)])
limminyIr=min([min(Sfa),min(Sfb),min(Sfc)])
limsupyIl=max([max(Sloada),max(Sloadb),max(Sloadc)])
limminyIl=min([min(Sloada),min(Sloadb),min(Sloadc)])
limsupyIc=max([max(Sa),max(Sb),max(Sc)])
limminyIc=min([min(Sa),min(Sb),min(Sc)])

VaIr=[]
VaIl=[]
VaIc=[]
VaIf3c=[]
VaIf3b=[]

n=0
while n<len(Va):

    VaIr.append(Va[n]*0.45)
    VaIl.append(Va[n]*0.9)
    VaIc.append(Va[n]*0.23)
    VaIf3c.append(Va[n]*0.18)
    VaIf3b.append(Va[n]*0.2)
    n=n+1
  
plt.close("all")
    
sizeLegend=9
sizeMarc=15
ubic=1
plt.figure(1,figsize=[10,6])

limsupy=max([max(Sfa),max(Sfb),max(Sfc)])
limminy=min([min(Sfa),min(Sfb),min(Sfc)])
plt.plot(t,Sfa, label="I Ra")
plt.plot(t,Sfb, label="I Rb")
plt.plot(t,Sfc, label="I Rc")
plt.plot(t,Spdo, label="Ipd R")
plt.plot(t,VaIr,'--',color="#c0c0c0",label="Va")
plt.ylabel("Corriente de Red (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.6*limminy, limsupy*1.7)
plt.legend(loc=2, prop={'size': sizeLegend})
plt.grid()

plt.savefig("s3_potencia.pdf")










