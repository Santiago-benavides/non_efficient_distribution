#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 29 17:12:50 2020

@author: santi
"""

import os
import numpy as np
import matplotlib.pyplot as plt

os.environ["PATH"] += os.pathsep + '/usr/local/texlive/2018/bin/x86_64-darwin'

"""
ejemplo uno: se침al adquirida de archivos .csv
"""
#ubicoci칩n de archivo archivo .csv
contenido=os.listdir()
file = open('simulacion_2v2.csv', 'r')
#almaceno datos de .csv en una lista de python
elementos=[]
for line in file:
    elementos.append(line.split(','))
file.close()
#se definen listas con variables del archivo .csv
t=[]  
Sloada=[]  
Sloadb=[] 
Sloadc=[] 
Mpd=[]  
Mpq=[]  
Mnd=[]  
Mnq=[]  
Mhmd=[]  
Mhmq=[]  

Sfa=[]  
Sfb=[]  
Sfc=[]  
Spdo=[]  
Spqo=[]  
Sndo=[]  
Snqo=[]  
Shmdo=[]  
Shmqo=[]  

Sa=[]  
Sb=[]  
Sc=[]  
Spd=[]  
Spq=[]  
Snd=[]  
Snq=[]  
Shmd=[]  
Shmq=[]

Sa2=[]  
Sb2=[]  
Sc2=[]  
Spd2=[]  
Spq2=[]  
Snd2=[]  
Snq2=[]  
Shmd2=[]  
Shmq2=[]

Sa3=[]  
Sb3=[]  
Sc3=[]  
Spd3=[]  
Spq3=[]  
Snd3=[]  
Snq3=[]  
Shmd3=[]  
Shmq3=[]

Va=[]
#inicia el while en 1 para quitar los nombres del archivo .csv y convierte
#los datos de cadena a flotante
n=1
while n<len(elementos):
    #selecci칩n de datos en archivos
    ###carga
    t.append(float(elementos[n][0]))  
    Sloada.append(float(elementos[n][1]))  
    Sloadb.append(float(elementos[n][2])) 
    Sloadc.append(float(elementos[n][3])) 
    Mpd.append(float(elementos[n][4]))  
    Mpq.append(float(elementos[n][5])) 
    Mnd.append(float(elementos[n][6]))  
    Mnq.append(float(elementos[n][7]))  
    Mhmd.append(float(elementos[n][8]))   
    Mhmq.append(float(elementos[n][9]))   
    ###red
    Sfa.append(float(elementos[n][10]))   
    Sfb.append(float(elementos[n][11]))   
    Sfc.append(float(elementos[n][12]))   
    Spdo.append(float(elementos[n][13]))   
    Spqo.append(float(elementos[n][14]))   
    Sndo.append(float(elementos[n][15]))   
    Snqo.append(float(elementos[n][16]))   
    Shmdo.append(float(elementos[n][17]))   
    Shmqo.append(float(elementos[n][18]))  
    ###fuente1
    Sa.append(float(elementos[n][19]))   
    Sb.append(float(elementos[n][20]))   
    Sc.append(float(elementos[n][21])) 
    Spd.append(float(elementos[1][22]))  
    Spq.append(float(elementos[n][23]))   
    Snd.append(float(elementos[n][24]))   
    Snq.append(float(elementos[n][25]))  
    Shmd.append(float(elementos[n][26]))  
    Shmq.append(float(elementos[n][27]))   
    ###fuente2
    Sa2.append(float(elementos[n][28]))   
    Sb2.append(float(elementos[n][29]))   
    Sc2.append(float(elementos[n][30])) 
    Spd2.append(float(elementos[1][31]))  
    Spq2.append(float(elementos[n][32]))   
    Snd2.append(float(elementos[n][33]))   
    Snq2.append(float(elementos[n][34]))  
    Shmd2.append(float(elementos[n][35]))  
    Shmq2.append(float(elementos[n][36]))   
    ###fuente3
    Sa3.append(float(elementos[n][37]))   
    Sb3.append(float(elementos[n][38]))   
    Sc3.append(float(elementos[n][39])) 
    Spd3.append(float(elementos[1][40]))  
    Spq3.append(float(elementos[n][41]))   
    Snd3.append(float(elementos[n][42]))   
    Snq3.append(float(elementos[n][43]))  
    Shmd3.append(float(elementos[n][44]))  
    Shmq3.append(float(elementos[n][45]))   
    
    
    Va.append(float(elementos[n][46]))   
    n=n+1

### cero de ruido en NH de red en inicio. no se porque no funciona. 

# Spdo=[]  
# Spqo=[]  
# Sndo=[]  
# Snqo=[]  
# Shmdo=[]  
# Shmqo
prueba=Spdo
n=0
while n<len(t)/3:
    # Spdo[n]=0
    Spqo[n]=0
    Sndo[n]=0
    Snqo[n]=0
    
    n=n+1

#graficado de se침ales csv
limsupyIr=max([max(Sfa),max(Sfb),max(Sfc)])
limminyIr=min([min(Sfa),min(Sfb),min(Sfc)])
limsupyIl=max([max(Sloada),max(Sloadb),max(Sloadc)])
limminyIl=min([min(Sloada),min(Sloadb),min(Sloadc)])
limsupyIc=max([max(Sa),max(Sb),max(Sc)])
limminyIc=min([min(Sa),min(Sb),min(Sc)])

VaIr=[]
VaIl=[]
VaIc=[]
VaIf3c=[]
VaIf3b=[]

n=0
while n<len(Va):

    VaIr.append(Va[n]*0.45)
    VaIl.append(Va[n]*0.9)
    VaIc.append(Va[n]*0.23)
    VaIf3c.append(Va[n]*0.18)
    VaIf3b.append(Va[n]*0.2)
    n=n+1
  
plt.close("all")
    
sizeLegend=12
sizeMarc=15
ubic=1
plt.figure(1,figsize=[6.5,6])

plt.subplot(2,1,1)
limsupy=max([max(Sfa),max(Sfb),max(Sfc)])
limminy=min([min(Sfa),min(Sfb),min(Sfc)])
plt.plot(t,Sfa, label="$I_A$ $G$")
plt.plot(t,Sfb, label="$I_B$ $G$")
plt.plot(t,Sfc, label="$I_C$ $G$")
plt.plot(t,VaIr,'--',color="#c0c0c0",label="$V_A$")
plt.ylabel("Grid Current (A)")
# plt.xlabel("tiempo (s)")
plt.xticks(fontsize=1)
plt.yticks(fontsize=13)
plt.ylim(1.6*limminy, limsupy*1.7)
plt.legend(loc=2, prop={'size': sizeLegend})
plt.grid()
plt.text(-max(t)/7,-limsupy*1.65, "a)", size=sizeMarc )

plt.subplot(2,1,2)
limsupy=max([max(Spdo),max(Spqo),max(Sndo),max(Snqo),max(Shmdo),max(Shmqo)])
limminy=min([min(Spdo),min(Spqo),min(Sndo),min(Snqo),min(Shmdo),min(Shmqo)])
plt.plot(t,Spdo, label="$CR_1$ $G$")
plt.plot(t,Spqo, label="$CR_2$ $G$")
plt.plot(t,Sndo, label="$CR_3$ $G$")
plt.plot(t,Snqo, label="$CR_4$ $G$")
plt.plot(t,Shmdo, label="$CR_5$ $G$")
plt.plot(t,Shmqo, label="$CR_6$ $G$")
plt.ylabel("Grid $CR$ (A)")
plt.xlabel("time (s)")
plt.xticks(fontsize=13)
plt.yticks(fontsize=13)
plt.ylim(-30, 60)
plt.legend(loc=2, prop={'size': sizeLegend})
plt.grid()
plt.text(-max(t)/7,-limsupy*0.7, "b)", size=sizeMarc )

plt.savefig("s2_02_red.pdf")


plt.figure(2,figsize=[6.5,6])

plt.subplot(2,1,1)
limsupy=max([max(Sloada),max(Sloadb),max(Sloadc)])
limminy=min([min(Sloada),min(Sloadb),min(Sloadc)])
plt.plot(t,Sloada, label="$I_A$ $L$")
plt.plot(t,Sloadb, label="$I_B$ $L$")
plt.plot(t,Sloadc, label="$I_C$ $L$")
plt.plot(t,VaIl,'--',color="#c0c0c0",label="$V_A$")
plt.ylabel("Load Current (A)")
# plt.xlabel("tiempo (s)")
plt.xticks(fontsize=1)
plt.yticks(fontsize=13)
plt.ylim(1.65*limminy, limsupy*1.75)
plt.legend(loc=2, prop={'size': sizeLegend})
plt.grid()
plt.text(-max(t)/7,-limsupy*1.85, "a)", size=sizeMarc )

plt.subplot(2,1,2)
limsupy=max([max(Mpd),max(Mpq),max(Mnd),max(Mnq),max(Mhmd),max(Mhmq)])
limminy=min([min(Mpd),min(Mpq),min(Mnd),min(Mnq),min(Mhmd),min(Mhmq)])
plt.plot(t,Mpd, label="$CR_1$ $L$")
plt.plot(t,Mpq, label="$CR_2$ $L$")
plt.plot(t,Mnd, label="$CR_3$ $L$")
plt.plot(t,Mnq, label="$CR_4$ $L$")
plt.plot(t,Mhmd, label="$CR_5$ $L$")
plt.plot(t,Mhmq, label="$CR_6$ $L$")
plt.ylabel("Load $CR$ (A)")
plt.xlabel("time (s)")
plt.xticks(fontsize=13)
plt.yticks(fontsize=13)
plt.ylim(1.2*limminy, limsupy*1.5)
plt.legend(loc=2, prop={'size': sizeLegend})
plt.grid()
plt.text(-max(t)/7,-limsupy*2.0, "b)", size=sizeMarc )

plt.savefig("s2_01_carga.pdf")

sizeLegend2=11
plt.figure(3,figsize=[10,9])

plt.subplot(3,1,1)
limsupy=max([max(Sa),max(Sb),max(Sc)])
limminy=min([min(Sa),min(Sb),min(Sc)])
plt.plot(t,Sa, label="$I_A$ $Solar$ $EG$")
plt.plot(t,Sb, label="$I_B$ $Solar$ $EG$")
plt.plot(t,Sc, label="$I_C$ $Solar$ $EG$")
plt.plot(t,VaIc,'--',color="#c0c0c0",label="$V_A$")
plt.ylabel("Solar \nConverter \nCurrent (A)")
# plt.xlabel("tiempo (s)")
plt.xticks(fontsize=1)
plt.yticks(fontsize=11)
plt.ylim(1.35*limminy, limsupy*1.65)
plt.xlim(-0.010, max(t)*1.1)
plt.legend(loc=ubic, prop={'size': sizeLegend2})
plt.grid()
plt.text(-max(t)/8,-limsupy*1.75, "a)", size=sizeMarc )

plt.subplot(3,1,2)
limsupy=max([max(Sa2),max(Sb2),max(Sc2)])
limminy=min([min(Sa2),min(Sb2),min(Sc2)])
plt.plot(t,Sa2, label="$I_A$ $Wind$ $EG$")
plt.plot(t,Sb2, label="$I_B$ $Wind$ $EG$")
plt.plot(t,Sc2, label="$I_C$ $Wind$ $EG$")
plt.plot(t,VaIf3b,'--',color="#c0c0c0",label="$V_A$")
plt.ylabel("Wind \nConverter \nCurrent (A)")
# plt.xlabel("tiempo (s)")
plt.xticks(fontsize=1)
plt.yticks(fontsize=11)
plt.ylim(1.35*limminy, limsupy*1.65)
plt.xlim(-0.010, max(t)*1.1)
plt.legend(loc=ubic, prop={'size': sizeLegend2})
plt.grid()
plt.text(-max(t)/8,-limsupy*1.75, "b)", size=sizeMarc )


plt.subplot(3,1,3)
limsupy=max([max(Sa),max(Sb),max(Sc)])
limminy=min([min(Sa),min(Sb),min(Sc)])
plt.plot(t,Sa3, label="$I_A$ $Battery$ $EG$")
plt.plot(t,Sb3, label="$I_B$ $Battery$ $EG$")
plt.plot(t,Sc3, label="$I_C$ $Battery$ $EG$")
plt.plot(t,VaIf3c,'--',color="#c0c0c0",label="$V_A$")
plt.ylabel("Battery \nConverter \nCurrent (A)")
plt.xlabel("time (s)")
plt.xticks(fontsize=11)
plt.yticks(fontsize=11)
plt.ylim(1.35*limminy, limsupy*1.65)
plt.xlim(-0.010, max(t)*1.1)
plt.legend(loc=ubic, prop={'size': sizeLegend2})
plt.grid()
plt.text(-max(t)/8,-limsupy*1.75, "c)", size=sizeMarc )

plt.savefig("s2_03_convertidores.pdf")



# plt.subplot(3,2,6)
# limsupy=max([max(Spd),max(Spq),max(Snd),max(Snq),max(Shmd),max(Shmq)])
# limminy=min([min(Spd),min(Spq),min(Snd),min(Snq),min(Shmd),min(Shmq)])
# plt.plot(t,Spd, label="Ipd C= "+str(round((Spd[-1]),2)))
# plt.plot(t,Spq, label="Ipq C= "+str(round((Spq[-1]),2)))
# plt.plot(t,Snd, label="Ind C= "+str(round((Snd[-1]),2)))
# plt.plot(t,Snq, label="Inq C= "+str(round((Snq[-1]),2)))
# plt.plot(t,Shmd, label="Ihmd C= "+str(round((Shmd[-1]),2)))
# plt.plot(t,Shmq, label="Ihmq C= "+str(round((Shmq[-1]),2)))
# # plt.ylabel("Amperios (A)")
# plt.xlabel("tiempo (s)")
# plt.xticks(fontsize=10)
# plt.yticks(fontsize=10)
# plt.ylim(1.2*limminy, limsupy*1.5)
# plt.legend(loc=ubic, prop={'size': sizeLegend})
# plt.grid()
# plt.text(-max(t)/5,-limsupy*3.8, "f)", size=sizeMarc )








